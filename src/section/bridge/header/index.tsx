import { useState } from 'react';
import styles from './header.module.css'
import DropDown from '@/component/dropdown';

const percents = [
    { key: '0.1' },
    { key: '0.5' },
    { key: '1' },
]

interface Props {
    onChange: (v: any) => void;
    amount: string;
    handlerEstimateUpdate: () => void;
}

export default function Header({
    onChange, amount, handlerEstimateUpdate
}: Props) {
    const [percent, setPercent] = useState('0.5')
    const [inputPercent, setInputPercent] = useState('0.5')
    const [degere, setDegere] = useState(0)
    const [isFocus, setIsFocus] = useState(false)

    return <div className={styles.wrapper}>
        <div className={styles.title}>
            Transfer
        </div>
        <div className={styles.actions}>
            <div className={styles.reload} onClick={() => { 
                setDegere(degere + 360)
                handlerEstimateUpdate() }}>
                <svg style={{ transition: 'all 1s', transform: `rotate(${degere}deg)` }} width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9.35155 5.51619C9.19288 5.44152 9.12055 5.34119 9.13455 5.21519C9.14855 5.08919 9.20221 4.98885 9.29555 4.91419C9.32355 4.89552 9.41455 4.82319 9.56855 4.69719C9.72255 4.57119 9.91155 4.41952 10.1355 4.24219C9.74355 3.79419 9.27688 3.44185 8.73555 3.18519C8.19421 2.92852 7.60621 2.80019 6.97155 2.80019C6.38355 2.80019 5.83288 2.90985 5.31955 3.12919C4.80621 3.34852 4.35821 3.64952 3.97555 4.03219C3.59288 4.41485 3.29188 4.86285 3.07255 5.37619C2.85321 5.88952 2.74355 6.44019 2.74355 7.02819C2.74355 7.60685 2.85321 8.15285 3.07255 8.66619C3.29188 9.17952 3.59288 9.62752 3.97555 10.0102C4.35821 10.3929 4.80621 10.6939 5.31955 10.9132C5.83288 11.1325 6.38355 11.2422 6.97155 11.2422C7.45688 11.2422 7.91655 11.1652 8.35055 11.0112C8.78455 10.8572 9.18121 10.6402 9.54055 10.3602C9.89988 10.0802 10.2079 9.75119 10.4645 9.37319C10.7212 8.99519 10.9102 8.58219 11.0315 8.13419C11.0969 7.91952 11.2182 7.74219 11.3955 7.60219C11.5729 7.46219 11.7829 7.39219 12.0255 7.39219C12.3149 7.39219 12.5599 7.49485 12.7605 7.70019C12.9612 7.90552 13.0615 8.14819 13.0615 8.42819C13.0615 8.55885 13.0382 8.68485 12.9915 8.80619C12.7955 9.45952 12.5062 10.0615 12.1235 10.6122C11.7409 11.1629 11.2859 11.6365 10.7585 12.0332C10.2312 12.4299 9.64555 12.7402 9.00155 12.9642C8.35755 13.1882 7.68088 13.3002 6.97155 13.3002C6.10355 13.3002 5.28688 13.1369 4.52155 12.8102C3.75621 12.4835 3.09121 12.0355 2.52655 11.4662C1.96188 10.8969 1.51388 10.2319 1.18255 9.47119C0.851214 8.71052 0.685547 7.89619 0.685547 7.02819C0.685547 6.16019 0.851214 5.34352 1.18255 4.57819C1.51388 3.81285 1.96188 3.14785 2.52655 2.58319C3.09121 2.01852 3.75621 1.57052 4.52155 1.23919C5.28688 0.907854 6.10355 0.742187 6.97155 0.742188C7.93288 0.742188 8.82421 0.940521 9.64555 1.33719C10.4669 1.73385 11.1669 2.27285 11.7455 2.95419C11.9602 2.79552 12.1399 2.65785 12.2845 2.54119C12.4292 2.42452 12.5202 2.35219 12.5575 2.32419C12.6135 2.27752 12.6742 2.24252 12.7395 2.21919C12.8049 2.19585 12.8655 2.19585 12.9215 2.21919C12.9775 2.24252 13.0265 2.29152 13.0685 2.36619C13.1105 2.44085 13.1409 2.55285 13.1595 2.70219C13.1689 2.78619 13.1782 2.92852 13.1875 3.12919C13.1969 3.32985 13.2062 3.56319 13.2155 3.82919C13.2249 4.09519 13.2295 4.37052 13.2295 4.65519C13.2295 4.93985 13.2249 5.20819 13.2155 5.46019C13.2062 5.77752 13.1315 6.00619 12.9915 6.14619C12.9169 6.22085 12.8049 6.26285 12.6555 6.27219C12.5062 6.28152 12.3475 6.26752 12.1795 6.23019C11.9275 6.17419 11.6499 6.11352 11.3465 6.04819C11.0432 5.98285 10.7539 5.91519 10.4785 5.84519C10.2032 5.77519 9.96055 5.70985 9.75055 5.64919C9.54055 5.58852 9.40755 5.54419 9.35155 5.51619Z" fill="#808095" />
                </svg>
            </div>
            <div style={{ position: 'relative', zIndex: 20 }}>
                <DropDown position='right' needClickClose={false} render={() => {
                    return <div className={styles.settingLayer}>
                        <div className={styles.settingHeader}>Setting</div>
                        <div className={styles.subTitle}>Slippage tolerance</div>
                        <div className={styles.percent}>
                            <div className={styles.tabs}>
                                {
                                    percents.map(item => {
                                        return <div onClick={() => {
                                            setPercent(item.key)
                                            setInputPercent(item.key)
                                        }} key={item.key} className={styles.tab + ` ${item.key === percent ? styles.active : ''}`}>{item.key}%</div>
                                    })
                                }
                            </div>
                            <div className={styles.inputWrapper} style={{ border: isFocus ? '1px solid rgba(255, 122, 0, 1)' : 'none' }}>
                                <input className={styles.tabInput} value={inputPercent} onChange={(e: any) => {
                                    setInputPercent(e.target.value)
                                    setPercent(e.target.value)
                                }} onFocus={() => {
                                    setIsFocus(true)
                                }} onBlur={() => {
                                    setIsFocus(false)
                                }}/>
                                <span className={styles.inputDesc}>%</span>
                            </div>
                        </div>
                    </div>
                }}>
                    <div className={styles.setting}>
                        <svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <rect x="1" y="1" width="24" height="24" rx="4" stroke="#808095" stroke-opacity="0.3" />
                            <path d="M19.8703 11.2218C19.8672 11.1942 19.864 11.1711 19.8594 11.1572V11.1449L19.8531 11.1111C19.7422 10.5789 19.3846 10.2359 18.9395 10.2359H18.8661C18.107 10.2359 17.4917 9.62683 17.4917 8.88239C17.4917 8.71013 17.5729 8.46557 17.6073 8.37944C17.8228 7.88417 17.5932 7.31969 17.0606 7.03206L15.3848 6.09844L15.3536 6.08767C15.2286 6.04768 15.0834 6 14.921 6C14.618 6 14.2775 6.13843 14.0667 6.34607C13.8027 6.60293 13.267 6.98592 12.9484 6.98592C12.6314 6.98592 12.0941 6.60447 11.8302 6.34607C11.6053 6.12766 11.2945 6 10.9759 6C10.8088 6 10.6682 6.04614 10.5433 6.08767L10.5151 6.09844L8.75813 7.03514L8.7472 7.04129C8.32083 7.30431 8.14747 7.90724 8.36456 8.38559L8.36768 8.39174L8.3708 8.39789C8.40516 8.47326 8.51136 8.72859 8.51136 8.95161C8.51136 9.69912 7.89289 10.3051 7.13699 10.3051H7.06358C6.59817 10.3051 6.24989 10.6435 6.14993 11.1865L6.14369 11.2172V11.228C6.14369 11.2434 6.13744 11.2649 6.13275 11.2926C6.09371 11.5248 6 12.0724 6 12.52C6 12.9676 6.09215 13.5151 6.13275 13.7474C6.13588 13.7751 6.139 13.7982 6.14369 13.812V13.8243L6.14993 13.8581C6.26082 14.3903 6.61847 14.7333 7.06358 14.7333H7.10106C7.8601 14.7333 8.47544 15.3424 8.47544 16.0868C8.47544 16.2591 8.39423 16.5037 8.35987 16.5898C8.15215 17.0558 8.34894 17.6542 8.80811 17.9556L8.8206 17.9618L10.4761 18.8693L10.5073 18.88C10.6323 18.92 10.7744 18.9677 10.9368 18.9677C11.2835 18.9677 11.5959 18.837 11.7911 18.6216C11.8099 18.6078 11.8286 18.5893 11.8505 18.5709C12.0504 18.3986 12.5876 17.9433 12.9422 17.9433C13.2061 17.9433 13.6481 18.2156 14.0932 18.6539C14.3181 18.8723 14.6289 19 14.9475 19C15.163 19 15.3223 18.9416 15.5035 18.8539L15.5098 18.8508L17.2074 17.9264L17.2137 17.9203C17.6401 17.6572 17.8134 17.0543 17.5963 16.576L17.5932 16.5698L17.5901 16.5637C17.587 16.5621 17.4542 16.2899 17.4792 16.0453L17.4823 16.0299V16.0146C17.4823 15.267 18.1008 14.661 18.8567 14.661H18.9348C19.4002 14.661 19.7485 14.3226 19.8484 13.7797L19.8547 13.7489V13.7382C19.8578 13.7259 19.8609 13.7074 19.8656 13.6828C19.9062 13.4567 19.9999 12.9291 19.9999 12.4462C20.003 12.0001 19.9109 11.4541 19.8703 11.2218ZM12.9984 14.6426C11.7974 14.6426 10.8244 13.6843 10.8244 12.5015C10.8244 11.3187 11.7974 10.3605 12.9984 10.3605C14.1994 10.3605 15.1724 11.3187 15.1724 12.5015C15.1724 13.6843 14.1994 14.6426 12.9984 14.6426Z" fill="#808095" />
                        </svg>
                    </div>
                </DropDown>
            </div>

        </div>
    </div>
}